@page "/block"
@using System.Text.Json
@using Breadloaf.Models
@using Microsoft.Extensions.Logging

@inject ILogger<BlockInfo> Logger;
@inject Blockchain Blockchain;

<section class="has-20-padding has-30-margin has-border-radius-15 is-somewhat-yellow has-shadow">
    <h1 class="title">Block Object:</h1>
    <div class="container">
        <p class="subtitle">
            A block is essentially a record. Every block is immutable, once mutated the whole chain becomes invalid.
        </p>
    </div>
    <code>
        public struct Block {
        [JsonPropertyName("nonce")]
        public long Nonce { get; set; }

        [JsonPropertyName("hash")]
        public string Hash { get; set; }

        [JsonPropertyName("previous-hash")]
        public string PreviousHash { get; set; }

        [JsonPropertyName("timestamp")]
        public DateTimeOffset TimeStamp { get; set; }

        [JsonPropertyName("transactions")]
        public List&lt;Transaction&gt; Transactions { get; set; }
        }
    </code>
</section>


<section class="has-20-padding has-30-margin has-border-radius-15 is-somewhat-yellow has-shadow">
    <h1 class="title">Transaction Object:</h1>
    <div class="container">
        <p class="subtitle">
            Information held by <highlight>Transaction</highlight> object:
        </p>
    </div>

    <code>
        public struct TransactionInfo {
        [JsonPropertyName("from"), JsonConverter(typeof(IPEndPointConverter))]
        public IPEndPoint From { get; set; }

        [JsonPropertyName("to"), JsonConverter(typeof(IPEndPointConverter))]
        public IPEndPoint To { get; set; }

        [JsonPropertyName("amount")]
        public double Amount { get; set; }

        [JsonPropertyName("memo")]
        public string Memo { get; set; }

        [JsonPropertyName("timestamp")]
        public DateTimeOffset Timestamp { get; set; }
        }
    </code>

</section>

<section class="has-20-padding has-30-margin has-border-radius-15 is-somewhat-yellow has-shadow">
    <div class="has-text-centered has-20-margin">
        <button class="button has-shadow is-medium is-somewhat-purple has-10-margin"
                @onclick="@GenerateBlock">
            Generate Block!
        </button>
    </div>

    <div style="display: @_isHidden">
        <p class="has-10-margin has-10-padding">
            When serialized to JSON, you can see all the data a block contains. The first block in the chain is called <highlight>Genesis block</highlight>,
            which is created when the application starts.
            <br>
            The genesis block always has it's previous hash set to 0 or 0's since it's the very first block in the chain!
            Each block generated is automatically added to the chain.
        </p>

        <code>@_rawData</code>
    </div>
</section>


@code {

    private string _isHidden = "none";
    private string _rawData;

    private void GenerateBlock() {
        try {
            var block = new BlockInfo {
                TimeStamp = DateTimeOffset.Now,
                PreviousHash = "000000",
                Transactions = Utilities.DummyTransactions.ToArray()
            };

            Hashing.Create(ref block);
            Blockchain.AddBlock(ref block);

            _rawData = JsonSerializer.Serialize(block, new JsonSerializerOptions {
                WriteIndented = true
            });

            Logger.LogInformation($"Block Created:\n{block}");
            _isHidden = "block";
        }
        catch (Exception exception) {
            Logger.LogError(exception, exception.Message);
        }
    }

}